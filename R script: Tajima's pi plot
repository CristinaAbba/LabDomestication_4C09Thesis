Pi_PlotFunction <- function(x, y) {

require(ggplot2)
x2 <- gsub("\\_.*","",x)
y2 <- y

#Read in the data:
Datt <- read.table(x)
colnames(Datt) <- c('chr', 'window', 'windowCount', ' propInwindow', 'Pi')

#Remove unnecessary regions: Not necessary based on later steps
Datt$chr <- as.character(Datt$chr)
Datt2 <- Datt

#Remove "na" Pi values
Datt2 <- Datt2[-which(Datt2$Pi=="na"),]

#Need the numbers for chromosomes for labelling and colours:
DattX <- Datt2[which(Datt2$chr=="X"),]
a <- dim(DattX)[1]
DattX$number <- 1:a

Datt2L <- Datt2[which(Datt2$chr=="2L"),]
b <- dim(Datt2L)[1]
Datt2L$number <- (a+1):(a+b)

Datt2R <- Datt2[which(Datt2$chr=="2R"),]
c <- dim(Datt2R)[1]
Datt2R$number <- (a+b+1):(a+b+c)

Datt3L <- Datt2[which(Datt2$chr=="3L"),]
d <- dim(Datt3L)[1]
Datt3L$number <- (a+b+c+1):(a+b+c+d)

Datt3R <- Datt2[which(Datt2$chr=="3R"),]
e <- dim(Datt3R)[1]
Datt3R$number <- (a+b+c+d+1):(a+b+c+d+e)

Datt4 <- Datt2[which(Datt2$chr=="4"),]
f <- dim(Datt4)[1]
Datt4$number <- (a+b+c+d+e+1):(a+b+c+d+e+f)

#Full data frame of necessary chromosomes
DattFull <- rbind(DattX, Datt2L, Datt2R, Datt3L, Datt3R, Datt4)

#Pi as numeric
DattFull$Pi=as.numeric(levels(DattFull$Pi))[DattFull$Pi]

DattFull$Seq <- x2

#assign(paste("Datt", x2, sep="_"),DattFull)

#Title:
z2 <- paste(x2, y2, sep="_")

# The plots:
Pi_plot <- ggplot(DattFull, aes(x = number, y= Pi, colour = chr))

Pi_plot_2 <- Pi_plot +
  geom_point(size=0.3, show.legend = F) +
  scale_y_continuous(limits=c(0.000, .020), breaks=seq(0.000, 0.020, 0.005)) +
  xlab("") +
  scale_x_discrete(limits=c(1049, 3185, 5277, 7443, 9952, 11359), labels = c("X", "2L", '2R', '3L', '3R', "4")) +
  theme(text = element_text(size=20),
    axis.text.x= element_text(size=15), axis.text.y= element_text(size=15)) +
  scale_colour_manual(values=c('deeppink4', 'palevioletred3', 'midnightblue', 'paleturquoise3', 'springgreen4', 'darkgoldenrod2')) +
ggtitle(z2)

return(Pi_plot_2)
}

# IMPORTANT: YOU MUST SOURCE THIS FUNCTION, THIS TELLS R WHAT YOU ARE DOING WITH YOUR DATA
# Once you source the function, now you can input the data 

# Example for one file (can repeat and change as necessary)
# Input is file: and the mapper for the title of the plot
#Example: Pi_PlotFunction('.pi file generated by popoolation', "additional details for title")
Pi_PlotFunction('ANCESTOR_ALL_aligned_merged.sorted.final.pi', "Pi Plot")
Pi_PlotFunction('LAADR1G24_GAGATTCC-AGGCGAAG_aligned_merged.sorted.final.pi', "Pi Plot")
Pi_PlotFunction('LAADR1G10_GAGATTCC-TAATCTTA_aligned_merged.sorted.final.pi', "Pi Plot")
Pi_PlotFunction('LAADR2G24_GAGATTCC-CAGGACGT_aligned_merged.sorted.final.pi', "Pi Plot")
Pi_PlotFunction('LAADR2G10_GAGATTCC-GTACTGAC_aligned_merged.sorted.final.pi', "Pi Plot")
Pi_PlotFunction('LAADR3G24_ATTCAGAA-TATAGCCT_aligned_merged.sorted.final.pi', "Pi Plot")
Pi_PlotFunction('LAADR3G10_ATTCAGAA-ATAGAGGC_aligned_merged.sorted.final.pi', "Pi Plot")

# Once you run this, R will generate plots for each of the merged files
# Save the graphs as images (NOT PDF), this will allow you the freedom of selecting your own dimensions for the graph
# I went with a large size, approximately 850 x 550, so that the resolution would be okay when I viewed the graph on a full computer screen, but I might change this later

# Pi Plots: Smooth function with overlay plots of different generations

#Function to read all and overlay plot
MyPi <- list.files(pattern=".pi")

for (file in MyPi){
require(ggplot2)
x2 <- gsub("\\_.*","",file)

#Read in the data:
Datt2 <- read.table(file)
colnames(Datt2) <- c('chr', 'window', 'windowCount', 'propInwindow', 'Pi')

Datt2$chr <- as.character(Datt2$chr)

#Remove "na" pi values
Datt2 <- Datt2[-which(Datt2$Pi=="na"),]

#Need the numbers for chromosomes for labelling and colours:
DattX <- Datt2[which(Datt2$chr=="X"),]
a <- dim(DattX)[1]
DattX$number <- 1:a

Datt2L <- Datt2[which(Datt2$chr=="2L"),]
b <- dim(Datt2L)[1]
Datt2L$number <- (a+1):(a+b)

Datt2R <- Datt2[which(Datt2$chr=="2R"),]
c <- dim(Datt2R)[1]
Datt2R$number <- (a+b+1):(a+b+c)

Datt3L <- Datt2[which(Datt2$chr=="3L"),]
d <- dim(Datt3L)[1]
Datt3L$number <- (a+b+c+1):(a+b+c+d)

Datt3R <- Datt2[which(Datt2$chr=="3R"),]
e <- dim(Datt3R)[1]
Datt3R$number <- (a+b+c+d+1):(a+b+c+d+e)

Datt4 <- Datt2[which(Datt2$chr=="4"),]
f <- dim(Datt4)[1]
Datt4$number <- (a+b+c+d+e+1):(a+b+c+d+e+f)

#Full data frame of necessary chromosomes
DattFull <- rbind(DattX, Datt2L, Datt2R, Datt3L, Datt3R, Datt4)

#Pi as numeric
DattFull$Pi=as.numeric(levels(DattFull$Pi))[DattFull$Pi]
DattFull$Seq <- x2
assign(paste("Datt", x2, sep="_"),DattFull)
}

Datt_ANCESTOR_GG <- ggplot(Datt_ANCESTOR, aes(x = number, y= Pi, colour = chr)) +
  geom_smooth(method = "loess", show.legend = F + scale_y_continuous(limits=c(0, 0.009), breaks=seq(0, 0.009, 0.001)) + 
  xlab("") +
  scale_x_discrete(limits=c(1049, 3185, 5277, 7443, 9952, 11359), labels = c("X", "2L", "2R", "3L", "3R", "4")) +
  scale_colour_manual(values=c("deeppink4", "palevioletred3", "midnightblue", "paleturquoise3", "springgreen4", "darkgoldenrod2")) +
  theme(text = element_text(size=20),
    axis.text.x= element_text(size=15), axis.text.y= element_text(size=15)) +
  geom_smooth(method = "loess", data = Datt_ANCESTOR, linetype = "solid", aes(x = number, y= Pi, colour = chr), show_guide = F) +
  geom_smooth(method = "loess", data = Datt_LAADR1G10, linetype = "twodash", aes(x = number, y= Pi, colour = chr), show_guide = F) +
  geom_smooth(method = "loess", data = Datt_LAADR1G24, linetype = "longdash", aes(x = number, y= Pi, colour = chr), show_guide = F) +
  geom_smooth(method = "loess", data = Datt_LAADR2G10, linetype = "dotted", aes(x = number, y= Pi, colour = chr), show_guide = F) +
  geom_smooth(method = "loess", data = Datt_LAADR2G24, linetype = "dotdash", aes(x = number, y= Pi, colour = chr), show_guide = F) +
  geom_smooth(method = "loess", data = Datt_LAADR3G10, linetype = "dashed", aes(x = number, y= Pi, colour = chr), show_guide = F) +
  geom_smooth(method = "loess", data = Datt_LAADR3G24, linetype = "4C88C488", aes(x = number, y= Pi, colour = chr), show_guide = F) 
  
print(Datt_ANCESTOR_GG)
  
gg_Datt_ANCESTOR <- ggplot(Datt_ANCESTOR, aes(x = number, y=Pi, linetype = chr)) +
  geom_smooth(method = "loess", size=1.25) + scale_y_continuous(limits=c(0, 0.009), breaks=seq(0, 0.009, 0.001)) +
  xlab("") +
  scale_x_discrete(limits=c(1049, 3185, 5277, 7443, 9952, 11359), labels = c("X", "2L", "2R", "3L", "3R", "4")) +
  scale_colour_manual(values=c("deeppink4", "palevioletred3", "midnightblue", "paleturquoise3", "springgreen4", "darkgoldenrod2")) +
  theme(text = element_text(size=20), axis.text.x= element_text(size=15), axis.text.y= element_text(size=15)) +
  geom_smooth(method = "loess", data = Datt_ANCESTOR, aes(x = number, y= Pi)) +
  geom_smooth(method = "loess", data = Datt_LAADR1G10, aes(x = number, y= Pi)) +
  geom_smooth(method = "loess", data = Datt_LAADR1G24, aes(x = number, y= Pi)) +
  geom_smooth(method = "loess", data = Datt_LAADR2G10, aes(x = number, y= Pi)) +
  geom_smooth(method = "loess", data = Datt_LAADR2G24, aes(x = number, y= Pi)) +
  geom_smooth(method = "loess", data = Datt_LAADR3G10, aes(x = number, y= Pi)) +
  geom_smooth(method = "loess", data = Datt_LAADR3G24, aes(x = number, y= Pi)) 

print(gg_Datt_ANCESTOR)
  
DATTTT_R1 <- rbind(Datt_ANCESTOR, Datt_LAADR1G10, Datt_LAADR1G24)
DATTTT_R2 <- rbind(Datt_ANCESTOR, Datt_LAADR2G10, Datt_LAADR2G24)
DATTTT_R3 <- rbind(Datt_ANCESTOR, Datt_LAADR3G10, Datt_LAADR3G24)

gg_R1 <- ggplot(DATTTT_R1, aes(x = number, y= Pi, linetype = chr, colour=Seq))+
  geom_smooth(method = "loess", size=1.25) + scale_y_continuous(limits=c(0, 0.009), breaks=seq(0, 0.009, 0.001)) +
  xlab("") +
  scale_linetype_manual(values=c("solid", "solid", "dotted", "dotted", "solid", "dotted"), guide = "none") +
  scale_x_discrete(limits=c(1049, 3185, 5277, 7443, 9952, 11359), labels = c("X", "2L", "2R", "3L", "3R", "4")) +
  scale_colour_manual(values=c(“tomato”, “royalblue2”, “orange”)) +
  theme(text = element_text(size=20), axis.text.x= element_text(size=15), axis.text.y= element_text(size=15), legend.text=element_text(size=7.5))

print(gg_R1)

gg_R2 <-ggplot(DATTTT_R2, aes(x = number, y= Pi, linetype = chr, colour=Seq))+
  geom_smooth(method = "loess", size=1.25) + scale_y_continuous(limits=c(0, 0.009), breaks=seq(0, 0.009, 0.001)) +
  xlab("") +
  scale_linetype_manual(values=c("solid", "solid", "dotted", "dotted", "solid", "dotted"), guide = "none") +
  scale_x_discrete(limits=c(1049, 3185, 5277, 7443, 9952, 11359), labels = c("X", "2L", "2R", "3L", "3R", "4")) +
  scale_colour_manual(values=c(“tomato”, “royalblue2”, “orange”)) +
  theme(text = element_text(size=20), axis.text.x= element_text(size=15), axis.text.y= element_text(size=15), legend.text=element_text(size=7.5))
  
print(gg_R2)
  
gg_R3 <-ggplot(DATTTT_R3, aes(x = number, y= Pi, linetype = chr, colour=Seq))+
  geom_smooth(method = "loess", size=1.25) + scale_y_continuous(limits=c(0, 0.009), breaks=seq(0, 0.009, 0.001)) +
  xlab("") +
  scale_linetype_manual(values=c("solid", "solid", "dotted", "dotted", "solid", "dotted"), guide = "none") +
  scale_x_discrete(limits=c(1049, 3185, 5277, 7443, 9952, 11359), labels = c("X", "2L", "2R", "3L", "3R", "4")) +
  scale_colour_manual(values=c(“tomato”, “royalblue2”, “orange”)) +
  theme(text = element_text(size=20), axis.text.x= element_text(size=15), axis.text.y= element_text(size=15), legend.text=element_text(size=7.5))
  
print(gg_R3

# Some useful column statistics:
# To view the minimum and maximum values, view the data table and then order the Pi column as increasing/decreasing from lowest/highest to highest/lowest

View(Datt_ANCESTOR)

# To determine the mean Pi value (you have to specify “Pi” because the calculation only works on numeric values)

mean(Datt_ANCESTOR$Pi)
